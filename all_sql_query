/* Create, View & Use Databases */  Single line comments start with --

-- Create Database

CREATE DATABASE DEMO;

-- To View or confirm Database 

SHOW DATABASES;

-- To start using database

USE DEMO; 

-- Create Table

CREATE TABLE TEST_1(EID INT, NAME VARCHAR(30), SALARY FLOAT);

-- To View or confirm table

Describe TEST_1;
DESC TEST_1;

-- Add New Column

ALTER TABLE EMPLOYEE ADD DOB DATE;

-- Delete Existing Column or Remove

ALTER TABLE EMPLOYEE DROP COLUMN CITY;

-- Rename Column

ALTER TABLE EMPLOYEE RENAME COLUMN NAME TO FULL_NAME;


-- Change Datatype

ALTER TABLE EMPLOYEE MODIFY COLUMN NAME VARCHAR(100);

-- Add Constraint in Column

ALTER TABLE EMPLOYEE ADD CONSTRAINT ID_UNIQUE UNIQUE(ID);

-- Drop Constraint

ALTER TABLE EMPLOYEE DROP CONSTRAINT ID_UNIQUE;

-- To View The Data

SELECT COUNT(*) FROM BANK_DETAILS
SELECT * FROM BANK_DETAILS
SELECT AGE, LOAN, JOB, FROM BANK_DETIALS
SELECT `DEFAULT` FROM BANK_DETAILS
SELECT * FROM BANK_DETAILS LIMIT 10
SELECT * FROM BANK_DETAILS WHERE AGE = 33
SELECT * FROM BANK_DETAILS WHERE AGE > 60
ELECT * FROM BANK_DETAILS WHERE AGE = 60
SELECT * FROM BANK_DETAILS WHERE AGE  = 60 AND JOB = 'RETIRED'
SELECT * FROM BANK_DETAILS WHERE EDUCATION = 'UNKNOWN' OR MARITAL = 'SINGLE'

SELECT DISTINCT JOB FROM BANK_DETAILS   [ find only jobs available in column]
SELECT * FROM BANK_DETAILS ORDER BY AGE [ arrange age by ascending order ]
SELECT * FROM BANK_DETAILS ORDER BY AGE DESC [ arrange age by descending order ]

SELECT SUM(BALANCE) AS "BALANCE" FROM BANK_DETAILS; [find sum of balance]
SELECT AVG(BALANCE) AS "BALANCE" FROM BANK_DETAILS; [find average of balance]
SELECT MIN(BALANCE) AS "BALANCE" FROM BANK_DETAILS;[find minimum of balance]
SELECT MAX(BALANCE) AS "BALANCE" FROM BANK_DETAILS;[find maximum of balance]
SELECT * FROM EMPLOYEE_1 ORDER BY SALARY DESC LIMIT 1; [find maximum of balance]
SELECT * FROM BANK_DETAILS WHERE LOAN = 'YES' [all who have loan]
SELECT JOB, AVG(BALANCE) AS "BALANCE" FROM BANK_DETAILS WHERE JOB = 'ADMIN.' GROUP BY JOB  [Average balance of Admin]
SELECT * FROM BANK_DETAILS WHERE JOB = 'UNEMPLOYED' AND AGE < 45 [Record without job and age less than 45]
SELECT * FROM BANK_DETAILS WHERE EDUCATION = 'PRIMARY' AND JOB = 'UNEMPLOYED' [ Records whos education primary and person is jobless ]
SELECT * FROM BANK_DETAILS WHERE BALANCE <= 0  [Find record whose balance is negative]
SELECT HOUSING, EDUCATION FROM BANK_DETAILS WHERE HOUSING = 'NO'  [Find record whose not have house and education two columns view ]
SELECT * FROM BANK_DETAILS WHERE BALANCE IN (SELECT MIN(BALANCE) FROM BANK_DETAILS) [ To Find minmum balance ]
SELECT * FROM BANK_DETAILS WHERE BALANCE = (SELECT MIN(BALANCE) MINBALANCE FROM BANK_DETAILS); [ To Find minmum balance ]
SELECT * FROM BANK_DETAILS WHERE BALANCE IN  (SELECT MAX(BALANCE) FROM BANK_DETAILS)  [ To Find Maximum balance ]

-- Create Procedure 

DELIMITER &&
CREATE PROCEDURE SHOW()
BEGIN
	SELECT * FROM BANK_DETAILS;
END &&

-- Create Procedure 

DELIMITER &&
CREATE PROCEDURE AVG_BAL_JOBROLE1(IN RAM VARCHAR(30))
BEGIN
	SELECT  AVG(BALANCE) FROM BANK_DETAILS WHERE JOB = RAM;
END &&

-- View Results
CALL AVG_BAL_JOBROLE1('ADMIN.')
CALL AVG_BAL_JOBROLE1('RETIRED')
CALL AVG_BAL_JOBROLE1('UNKNOWN')


-- Create View

CREATE VIEW BANK_VIEW AS SELECT AGE , JOB , MARITAL , BALANCE , EDUCATION FROM BANK_DETAILS; 

-- Results

SELECT  AVG(BALANCE) FROM BANK_VIEW WHERE JOB = 'ADMIN.'


-- Load Data into Table

LOAD DATA INFILE 'D:/SQL/ATTRIBUTEDATASET.CSV'
INTO TABLE DRESS
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\N'
IGNORE 1 ROWS;

-- Create table with increment value

CREATE TABLE IF NOT EXISTS TEST (
TEST_ID INT AUTO_INCREMENT,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
PRIMARY KEY (TEST_ID))

-- Create table with increment value

CREATE TABLE IF NOT EXISTS TEST2 (
TEST_ID INT AUTO_INCREMENT,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
PRIMARY KEY (TEST_ID))

SELECT * FROM TEST2

INSERT INTO TEST2 (TEST_NAME, TEST_MAILID, TEST_ADDRESS) VALUES ('RAM','RAM@RAM.COM','DELHI'),
('SITA','SITA@SITA.COM','DELHI'),
('LAXIMAN','LAXIMAN@LAXIMAN.COM','DELHI'),
('HANUMAN','HANUMAN@HANUMAN.COM','NASIK')

-- Auto Increment Constraints 

CREATE TABLE IF NOT EXISTS TEST3 (
TEST_ID INT NOT NULL AUTO_INCREMENT,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
PRIMARY KEY(TEST_ID))

INSERT INTO TEST3 (TEST_NAME, TEST_MAILID, TEST_ADDRESS) VALUES ('RAM', 'RAM@RAM.COM','DELHI'),
('KRISHARA', 'KIRSHNA@RAM.COM', 'DWARKA'),
('NARAYAN', 'NARAYAN@RAM.COM', 'VAIKUNT'),
('LAXMI', 'LAXMI@RAM.COM', 'VAIKUNT')

-- Check Constraints 

CREATE TABLE IF NOT EXISTS TEST4 (
TEST_ID INT,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
TEST_SALARY INT CHECK(TEST_SALARY > 10000) )

INSERT INTO TEST4 VALUES (1,'RAM', 'RAM@RAM.COM','DELHI', 50000),
(2,'KRISHARA', 'KIRSHNA@RAM.COM', 'DWARKA', 30000),
(3,'NARAYAN', 'NARAYAN@RAM.COM', 'VAIKUNT', 111000),
(4, 'LAXMI', 'LAXMI@RAM.COM', 'VAIKUNT', 20000)

-- Not Null Constraints 

CREATE TABLE IF NOT EXISTS TEST5 (
TEST_ID INT NOT NULL,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
TEST_SALARY INT CHECK(TEST_SALARY > 10000) )

INSERT INTO TEST5 (TEST_NAME, TEST_MAILID, TEST_ADDRESS, TEST_SALARY) VALUES ('RAM', 'RAM@RAM.COM','DELHI', 50000)


-- Not Null DEFAULT Constraints 

CREATE TABLE IF NOT EXISTS TEST6 (
TEST_ID INT NOT NULL DEFAULT 0,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30),
TEST_ADDRESS VARCHAR(30),
TEST_SALARY INT CHECK(TEST_SALARY > 10000) )

INSERT INTO TEST6 (TEST_NAME, TEST_MAILID, TEST_ADDRESS, TEST_SALARY) VALUES ('RAM', 'RAM@RAM.COM','DELHI', 50000)
SELECT * FROM TEST6

-- Unique Constraints 

CREATE TABLE IF NOT EXISTS TEST7 (
TEST_ID INT NOT NULL DEFAULT 0,
TEST_NAME VARCHAR(30),
TEST_MAILID VARCHAR(30) UNIQUE,
TEST_ADDRESS VARCHAR(30),
TEST_SALARY INT CHECK(TEST_SALARY > 10000) )

INSERT INTO TEST7 (TEST_NAME, TEST_MAILID, TEST_ADDRESS, TEST_SALARY) VALUES ('RAM', 'RAM@RAM.COM','DELHI', 50000)
INSERT INTO TEST7 (TEST_NAME, TEST_MAILID, TEST_ADDRESS, TEST_SALARY) VALUES ('RAM', 'RAM@RAM.COM','DELHI', 50000)

-- Multiple Constraints

CREATE TABLE IF NOT EXISTS TEST8 (
TEST_ID INT NOT NULL AUTO_INCREMENT,
TEST_NAME VARCHAR(30) NOT NULL DEFAULT 'UNKNOWN',
TEST_MAILID VARCHAR(30) UNIQUE NOT NULL,
TEST_ADDRESS VARCHAR(30)CHECK (TEST_ADDRESS= 'BANGALORE') NOT NULL,
TEST_SALARY INT CHECK(TEST_SALARY > 10000) NOT NULL,
PRIMARY KEY (TEST_ID))

-- Convert string into date

SELECT STR_TO_DATE(ORDER_DATE, '%M/%D/%Y') FROM SALES

-- Add new column after column

ALTER TABLE SALES
ADD COLUMN ORDER_DATE_NEW DATE AFTER ORDER_DATE

-- Error while addding data use it

SET SESSION SQL_MODE = ''

-- Add/update new entey into new column 

UPDATE SALES
SET ORDER_DATE_NEW = STR_TO_DATE(ORDER_DATE, '%M/%D/%Y')

-- To View the data according to dates

SELECT * FROM SALES WHERE SHIP_DATE_NEW = '2011-01-05'
SELECT * FROM SALES WHERE SHIP_DATE_NEW > '2011-01-05'
SELECT * FROM SALES WHERE SHIP_DATE_NEW < '2011-01-05'
SELECT * FROM SALES WHERE SHIP_DATE_NEW BETWEEN '2011-01-05' AND '2011-01-08'
SELECT * FROM SALES WHERE SHIP_DATE_NEW < DATE_SUB(NOW(), INTERVAL 1 WEEK)

SELECT DATE_SUB(NOW(), INTERVAL 1 WEEK)
SELECT DATE_SUB(NOW(), INTERVAL 30 DAY)
SELECT DATE_SUB(NOW(), INTERVAL 30 YEAR)
SELECT DAYNAME('2022-07-20 21:10:30')

-- To See Current Time and Date of System

SELECT NOW()
SELECT CURDATE()
SELECT CURTIME()
SELECT YEAR(NOW()) 
SELECT DAYNAME(NOW())

-- Modify Data type of Column

ALTER TABLE SALES
MODIFY COLUMN YEAR DATETIME;


-- Modify Data type of Column from Date to int

ALTER TABLE SALES MODIFY COLUMN YEAR_NEW INT
ALTER TABLE SALES MODIFY COLUMN DAY_NEW INT
ALTER TABLE SALES MODIFY COLUMN MONTH_NEW INT

-- Add/Update new records from Column1 to Column2

UPDATE SALES SET MONTH_NEW = MONTH(ORDER_DATE_NEW)
UPDATE SALES SET DAY_NEW = DAY(ORDER_DATE_NEW)
UPDATE SALES SET YEAR_NEW = YEAR(ORDER_DATE_NEW)

-- To View The Sales Records

SELECT YEAR_NEW, AVG(SALES) FROM SALES GROUP BY YEAR_NEW
SELECT YEAR_NEW, SUM(SALES) FROM SALES GROUP BY YEAR_NEW
SELECT YEAR_NEW, MIN(SALES) FROM SALES GROUP BY YEAR_NEW
SELECT YEAR_NEW, MAX(SALES) FROM SALES GROUP BY YEAR_NEW
